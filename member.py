import telegram
import telebot
import datetime
import time
import os
import hashlib
import subprocess
import psutil
import base64
import requests
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler,CallbackQueryHandler

bot_token = '6962047277:AAHnBGVg4LTkFVVQnHmQOVHDey9gAgDH_-o'  # Thay YOUR_BOT_TOKEN b·∫±ng m√£ token c·ªßa bot Telegram c·ªßa b·∫°n
bot = telegram.Bot(token=bot_token)

allowed_group_id = -1001897361189  # Thay YOUR_GROUP_ID b·∫±ng ID c·ªßa nh√≥m b·∫°n mu·ªën bot ho·∫°t ƒë·ªông trong ƒë√≥

allowed_users = []
processes = []
ADMIN_ID = 6622548678  # Thay 123456789 b·∫±ng ID c·ªßa admin

# K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu SQLite
connection = sqlite3.connect('user_data.db')
cursor = connection.cursor()

# T·∫°o b·∫£ng ng∆∞·ªùi d√πng n·∫øu ch∆∞a t·ªìn t·∫°i
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_time TEXT
    )
''')
connection.commit()

def TimeStamp():
    now = str(datetime.date.today())
    return now

def load_users_from_database():
    cursor.execute('SELECT user_id, expiration_time FROM users')
    rows = cursor.fetchall()
    for row in rows:
        user_id = row[0]
        expiration_time = datetime.datetime.strptime(row[1], '%Y-%m-%d %H:%M:%S')
        if expiration_time > datetime.datetime.now():
            allowed_users.append(user_id)

def save_user_to_database(connection, user_id, expiration_time):
    cursor = connection.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, expiration_time)
        VALUES (?, ?)
    ''', (user_id, expiration_time.strftime('%Y-%m-%d %H:%M:%S')))
    connection.commit()

def add_user(update, context):
    admin_id = update.message.from_user.id
    if admin_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    if len(context.args) == 0:
        update.message.reply_text('Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng.')
        return

    user_id = int(context.args[0])
    allowed_users.append(user_id)
    # L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu v·ªõi th·ªùi gian h·∫øt h·∫°n l√† sau 30 ng√†y
    expiration_time = datetime.datetime.now() + datetime.timedelta(days=30)
    connection = sqlite3.connect('user_data.db')
    save_user_to_database(connection, user_id, expiration_time)
    connection.close()

    update.message.reply_text(f'Ng∆∞·ªùi d√πng c√≥ ID {user_id} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /sms.')

# G·ªçi h√†m load_users_from_database ƒë·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu
load_users_from_database()

# Dictionary to store the last used time for each phone number
last_used_times = {}

def khanh(update, context):
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong danh s√°ch ƒë∆∞·ª£c ph√©p hay kh√¥ng
    user_id = update.message.from_user.id
    if user_id not in allowed_users:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y /how ƒë·ªÉ xem h∆∞·ªõng d·∫´n.')
        return

    # Ki·ªÉm tra xem bot ƒëang ho·∫°t ƒë·ªông trong nh√≥m ƒë√∫ng hay kh√¥ng
    if update.message.chat_id != allowed_group_id:
        update.message.reply_text('Bot ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m n√†y https://t.me/kun_smsfree')
        return

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng tham s·ªë ƒë·∫ßu v√†o
    if len(context.args) != 2:
        update.message.reply_text("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng. V√≠ d·ª•: [/sms 0987654321 5]")
        return

    phone_number = context.args[0]
    spam_time = context.args[1]

    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
    if not phone_number.isdigit() or len(phone_number) != 10:
        update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng 10 ch·ªØ s·ªë.")
        return

    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng th·ªùi gian spam
    if not spam_time.isdigit() or int(spam_time) > 49:
        update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ph√∫t (nh·ªè h∆°n 50) sau l·ªánh [/sms]. V√≠ d·ª•: [/sms 0987654321 5]")
        return

    if phone_number in ['113', '114', '0376349783', '0333079921', '0974707985', '0915215448', '+84397333616', '+84915215448', '+84974707985', '0978551717', '116', '911']:
        # S·ªë ƒëi·ªán tho·∫°i n·∫±m trong danh s√°ch c·∫•m
        update.message.reply_text("S·ªë n√†y n·∫±m trong danh s√°ch c·∫•m. Vui l√≤ng nh·∫≠p s·ªë kh√°c.")
        return

    current_time = time.time()

    if phone_number in last_used_times:
        last_used_time = last_used_times[phone_number]
        if current_time - last_used_time < 300:
            # Th√¥ng b√°o cho ng∆∞·ªùi d√πng r·∫±ng s·ªë ƒëang trong qu√° tr√¨nh t·∫•n c√¥ng, c·∫ßn ch·ªù th·ªùi gian
            remaining_time = int(300 - (current_time - last_used_time))
            update.message.reply_text(f"Number {phone_number} ƒêang Trong Qu√° Tr√¨nh T·∫•n C√¥ng. Vui L√≤ng Ch·ªù {remaining_time} Gi√¢y M·ªõi T·∫•n C√¥ng ƒê∆∞·ª£c L·∫ßn Hai.")
            return

    user_mention = update.message.from_user.mention_html()
    hi = f'''
-https://toolscommand-2024.000webhostapp.com/kuncrows.mp4
üöÄ Attack Sent Successfully üöÄ 
 Bot ü§ñ: @panelfree_kuncrows_bot
 Users üë§ :[ {user_mention} ]
 Target üì± : [ {phone_number} ]
 Repeats ‚öîÔ∏è:[ {spam_time} ]
 Plan üí∏:  [ FREE ] 
 Cooldown ‚è±: [ 60s ]
 Owner & Dev üëë : Vu Hai Lam 
'''

    update.message.reply_text(text=hi, parse_mode=telegram.ParseMode.HTML)
    last_used_times[phone_number] = current_time

    # Ch·∫°y file sms.py
    file_path = os.path.join(os.getcwd(), "sms.py")
    process = subprocess.Popen(["python", file_path, phone_number, "100"])
    processes.append(process)

def menu_to(update, context):
    help_text = '''
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚î£‚û§ ƒê·ªÉ S·ª≠ D·ª•ng Spam call th√¨ d√πng l·ªánh 
‚î£‚û§/sms 0877239630 5 
‚î£‚û§ trong ƒë√≥ 0877239630 l√† sdt mu·ªën spam 
‚î£‚û§ c√≤n s·ªë 5 l√† t·ª±a ch∆∞ng cho s·ªë ph√∫t spam
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚î£‚û§ ƒê·ªÉ S·ª≠ D·ª•ng Spam Th√¨ L·∫•y Key
‚î£‚û§ /getkey ƒê·ªÉ L·∫•y Key
‚î£‚û§ /key ƒê·ªÉ Nh·∫≠p Key
‚î£‚û§ 1 Key Spam ƒê∆∞·ª£c 24H
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚î£‚û§ ƒê·ªÉ Mua Key Vip 
‚î£‚û§ /muakey ƒê·ªÉ Mua Key Vip
‚î£‚û§ ƒê·ªÉ S·ª≠ D·ª•ng Tools VIP Kh√¥ng Gi·ªõi H·∫°n G√µ /muakey
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
'''

def hoatdong_to(update, context):
    help_text = '''
Bot ƒëang ho·∫°t ƒë·ªông.
'''

    update.message.reply_text(text=help_text)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackQueryHandler, CommandHandler

def muakey(update, context):
    chat_id = update.effective_chat.id
    if update.message.chat.type == 'private':
        keyboard = [[InlineKeyboardButton("Momo", callback_data='momo'),
                     InlineKeyboardButton("Mbbank", callback_data='mbbank')]]

        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text='Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:', reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=chat_id, text='Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /muakey trong chat ri√™ng ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c h∆∞·ªõng d·∫´n thanh to√°n.')

def button(update, context):
    query = update.callback_query
    chat_id = query.message.chat_id

    if query.data == 'momo':
        momo_message = f'''Th√¥ng tin thanh to√°n Momo:
S·ªë t√†i kho·∫£n: 0333078199
H·ªç t√™n ch·ªß t√†i kho·∫£n: VU HAI LAM 
N·ªôi dung chuy·ªÉn kho·∫£n c·ªßa b·∫°n: id{chat_id}
S·ªë ti·ªÅn: 15.000vnƒë'''

        context.bot.send_message(chat_id=chat_id, text=momo_message)

    elif query.data == 'mbbank':
        mbbank_message = f'''Th√¥ng tin thanh to√°n MBBank:
S·ªë t√†i kho·∫£n: 5000189408
H·ªç t√™n ch·ªß t√†i kho·∫£n: VU HAI LAM  
N·ªôi dung chuy·ªÉn kho·∫£n c·ªßa b·∫°n: id{chat_id}
S·ªë ti·ªÅn: 15.000vnƒë'''

        context.bot.send_message(chat_id=chat_id, text=mbbank_message)

    
def status(update, context):
    admin_id = update.message.from_user.id
    if admin_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return
    uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(psutil.boot_time())
    uptime_text = f"Bot ƒë√£ ho·∫°t ƒë·ªông trong {uptime}"

    cpu_usage = psutil.cpu_percent()
    cpu_text = f"CPU ƒêang D√πng: {cpu_usage}%"
    
    memory_usage = psutil.virtual_memory().percent
    memory_text = f"Memory ƒêang D√πng: {memory_usage}%"
    
    disk_usage = psutil.disk_usage('/').percent
    disk_text = f"Disk ƒêang D√πng: {disk_usage}%"
    
    status_text = f"{uptime_text}\n{cpu_text}\n{memory_text}\n{disk_text}"
    update.message.reply_text(text=status_text)

def check(update, context):
    admin_id = update.message.from_user.id
    if admin_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return
    process_count = len(processes)
    update.message.reply_text(text=f'{process_count} S·ªë ƒëi·ªán tho·∫°i ƒëang spam')

def admin_info(update, context):
    admin_name = '''- ADMIN üëæüíª
    + Administrator : KUN CROWS
    '''
    admin_contact = '''- Th√¥ng Tin Li√™n H·ªá üìû
    + Zalo : 0933514752'''

    message = f"{admin_name}\n {admin_contact}"
    update.message.reply_text(text=message)

def grant_permission(update, context):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    if len(context.args) == 0:
        update.message.reply_text('Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng.')
        return

    user_id = int(context.args[0])
    allowed_users.append(user_id)
    update.message.reply_text(f'Ng∆∞·ªùi d√πng c√≥ ID {user_id} ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng l·ªánh /sms m√† kh√¥ng c·∫ßn ƒë·ª£i th·ªùi gian gi·ªØa c√°c l·∫ßn s·ª≠ d·ª•ng.')


def stop(update, context):
    user_id = update.message.from_user.id
    if user_id not in allowed_users:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    text = update.message.text.strip().replace(' ', '')
    numbers = [char for char in text if char.isdigit()]

    if len(numbers) != 10:
        update.message.reply_text('Vui l√≤ng ƒëi·ªÅn s·ªë c·∫ßn d·ª´ng.')
    else:
        # Perform the action to stop the specified numbers
        # ...

        update.message.reply_text(f'ƒê√£ d·ª´ng s·ªë ƒëi·ªán tho·∫°i: {"".join(numbers)}')



def remove_user(update, context):
    admin_id = update.message.from_user.id
    if admin_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    if len(context.args) == 0:
        update.message.reply_text('Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng.')
        return

    user_id = int(context.args[0])
    if user_id in allowed_users:
        allowed_users.remove(user_id)
        connection = sqlite3.connect('user_data.db')
        cursor = connection.cursor()
        cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        connection.commit()
        connection.close()
        update.message.reply_text(f'Ng∆∞·ªùi d√πng c√≥ ID {user_id} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /sms.')
    else:
        update.message.reply_text(f'Ng∆∞·ªùi d√πng c√≥ ID {user_id} kh√¥ng t·ªìn t·∫°i trong danh s√°ch ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /sms.')

def user_list(update, context):
    admin_id = update.message.from_user.id
    if admin_id != ADMIN_ID:
        update.message.reply_text('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    if len(allowed_users) == 0:
        update.message.reply_text('Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /sms hi·ªán ƒëang tr·ªëng.')
        return

    user_list_text = 'Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /sms:\n'
    for user_id in allowed_users:
        user = bot.get_chat_member(allowed_group_id, user_id)
        user_list_text += f'- ID: {user.user.id}, T√™n: {user.user.first_name} {user.user.last_name}\n'
    update.message.reply_text(user_list_text)

def plan(update, context):
    reply_text = 'Gi√° c·∫£ c·ªßa c√°c g√≥i d·ªãch v·ª• t·∫•t c·∫£ ƒë·ªÅu ch√°t admin @kun_dzll:\n\n'
    reply_text += '- G√≥i /sms: 15k/1 th√°ng\n'
    reply_text += '- G√≥i /sms: 100k/ Kh√¥ng gi·ªõi h·∫°n\n'
    reply_text += '- Thu√™ DDoS 50k/1 th√°ng ( time DDoS 120s - time ch·ªù 240s)\n'
    reply_text += '- Thu√™ BOT t·ª± l√†m admin 50k/th√°ng\n'
    reply_text += '- Mua src ƒë·ªÉ l√†m bot c√≥ code getkey s·∫µng 150k\n'
    update.message.reply_text(reply_text)

def generate_key(user_id):
    today = datetime.date.today().strftime("%Y-%m-%d")
    key_string = f"{user_id}-{today}"
    key = hashlib.sha256(key_string.encode()).hexdigest()
    return key

def process_key(update, context):
    text = update.message.text.split()

    if len(text) >= 2 and text[0].strip() == "/key":
        key = text[1].strip()

        if key == "":
            update.message.reply_text('Vui l√≤ng nh·∫≠p key. V√≠ d·ª•: /key keycuaban\nN·∫øu b·∫°n ch∆∞a nh·∫≠n key, vui l√≤ng nh·∫•p /getkey ƒë·ªÉ nh·∫≠n key.')
        else:
            encoded_user_id = base64.b64encode(str(update.effective_user.id).encode()).decode()

            if key == generate_key(encoded_user_id):
                # X√°c th·ª±c key th√†nh c√¥ng
                connection = sqlite3.connect('user_data.db')
                expiration_time = datetime.datetime.now() + datetime.timedelta(days=1)
                user_id = update.effective_user.id
                allowed_users.append(user_id)
                save_user_to_database(connection, user_id, expiration_time)
                connection.close()

                # S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c key
                num_users = len(allowed_users)

                # G·ª≠i id_chat c·ªßa ng∆∞·ªùi d√πng v√†o group_id
                group_id = "-1001897361189"  # Replace with your actual group ID
                context.bot.send_message(chat_id=group_id, text=f'Ng∆∞·ªùi d√πng ID: {update.message.chat_id} ƒë√£ x√°c th·ª±c key th√†nh c√¥ng')

                update.message.reply_text(f'X√°c th·ª±c key th√†nh c√¥ng. C·∫£m ∆°n ƒë√£ ·ªßng h·ªô. Hi·ªán c√≥ {num_users} ng∆∞·ªùi ƒë√£ x√°c th·ª±c key b√¢y gi·ªù b·∫°n c√≥ th·ªÉ d√πng l·ªánh /sms.')
            else:
                update.message.reply_text('X√°c th·ª±c key th·∫•t b·∫°i. N·∫øu ch∆∞a nh·∫≠n key, vui l√≤ng nh·∫•p /getkey ƒë·ªÉ nh·∫≠n key.')


  

def get_key(update, context):
    # M√£ h√≥a id ng∆∞·ªùi d√πng l·ªánh
    encoded_id = base64.b64encode(str(update.effective_user.id).encode()).decode()
    key = generate_key(encoded_id)

    # Ki·ªÉm tra xem tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i t·ª´ nh√≥m hay ri√™ng t∆∞
    if update.message.chat.type == 'private':
        # N·∫øu l√† cu·ªôc tr√≤ chuy·ªán ri√™ng t∆∞, x·ª≠ l√Ω nh·∫≠n key
        long_url = f"https://getkeyv2-2024.000webhostapp.com/key.html?key={key}"
        api_token = '2a518ced-fa94-433f-af99-9392b645333b'
        url = requests.get(f'https://web1s.com/api?token={api_token}&url={long_url}').json()
        link = url['shortenedUrl']

        # G·ª≠i gi√° tr·ªã c·ªßa bi·∫øn link v·ªÅ cho ng∆∞·ªùi d√πng ri√™ng t∆∞
        update.message.reply_text(f"-https://toolscommand-2024.000webhostapp.com/kun_dzll.mp4 || Link key C·ªßa B·∫°n L√†: {link} Sau Khi V∆∞·ª£t Link Th√†nh C√¥ng Th√¨ [/key keyhomnay] ƒê·ªÉ X√°c Th·ª±c Key.")
    else:
        # N·∫øu l√† tin nh·∫Øn t·ª´ nh√≥m, g·ª≠i th√¥ng b√°o y√™u c·∫ßu nh·∫Øn ri√™ng
        user_id = update.effective_user.id
        button_text = "Nh·∫Øn Tin Ri√™ng ƒê·ªÉ Get Key"
        button_url = f"t.me/panelfree_kuncrows_bot?start={user_id}"
        keyboard = [[InlineKeyboardButton(button_text, url=button_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # G·ª≠i th√¥ng b√°o y√™u c·∫ßu nh·∫Øn ri√™ng t·ªõi nh√≥m
        update.message.reply_text("Vui l√≤ng nh·∫Øn ri√™ng v·ªõi bot ƒë·ªÉ nh·∫≠n key.", reply_markup=reply_markup, parse_mode='HTML')




def main():
    updater = Updater(token=bot_token, use_context=True)
    dispatcher = updater.dispatcher

    menu_handler = CommandHandler('menu', menu_to)
    dispatcher.add_handler(menu_handler)

    hoatdong_handler = CommandHandler('hoatdong', hoatdong_to)
    dispatcher.add_handler(hoatdong_handler)

    muakey_handler = CommandHandler('muakey', muakey)
    dispatcher.add_handler(muakey_handler)

    button_handler = CallbackQueryHandler(button)
    dispatcher.add_handler(button_handler)

    khanh_handler = CommandHandler('sms', khanh)
    dispatcher.add_handler(khanh_handler)

    admin_handler = CommandHandler('admin', admin_info)
    dispatcher.add_handler(admin_handler)

    grant_handler = CommandHandler('grant', grant_permission)
    dispatcher.add_handler(grant_handler)

    add_user_handler = CommandHandler('adduser', add_user)
    dispatcher.add_handler(add_user_handler)

    menu_handler = CommandHandler('menu', menu_to)
    dispatcher.add_handler(menu_handler)

    status_handler = CommandHandler('status', status)
    dispatcher.add_handler(status_handler)

    stop_handler = CommandHandler('stop', stop)
    dispatcher.add_handler(stop_handler)


    check_handler = CommandHandler('check', check)
    dispatcher.add_handler(check_handler)

    remove_user_handler = CommandHandler('removeuser', remove_user)
    dispatcher.add_handler(remove_user_handler)

    user_list_handler = CommandHandler('userlist', user_list)
    dispatcher.add_handler(user_list_handler)

    plan_handler = CommandHandler('plan', plan)
    dispatcher.add_handler(plan_handler)

    key_handler = CommandHandler('key', process_key)
    dispatcher.add_handler(key_handler)

    getkey_handler = CommandHandler('getkey', get_key)
    dispatcher.add_handler(getkey_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()